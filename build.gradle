/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
import com.github.jk1.license.render.TextReportRenderer

buildscript {
    dependencies {
        classpath 'com.github.jk1:gradle-license-report:2.1'
    }
}

plugins {
    id 'com.diffplug.spotless' version '6.22.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

apply from: file("${rootDir}/build-resources.gradle")
allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'com.github.jk1.dependency-license-report'

    ext {
        mavenPublicationRootFile = file(rootProject.layout.buildDirectory.dir('m2'))
    }

    spotless {
        format 'markdown', {
            target '*.md'
            // TODO: enrich format rules
            endWithNewline()
        }
        format 'misc', {
            target '.gitignore', '*.yml', '*.yaml'
            // TODO: enrich format rules
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    project.plugins.withType(JavaPlugin).configureEach {
        java {
            withJavadocJar()
            withSourcesJar()
        }
    }

    checkstyle {
        toolVersion = '10.26.1'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    spotless {
        java {
            targetExclude 'build/generated-src/antlr/**'
            // TODO: enrich format rules
            removeUnusedImports()
        }
    }
    dependencies {
        implementation platform('com.fasterxml.jackson:jackson-bom:2.17.2')
        implementation platform('org.eclipse.jetty:jetty-bom:9.4.53.v20231009')
        implementation platform('io.micrometer:micrometer-bom:1.10.5')
        implementation libs.guava.core
        implementation libs.slf4j.api
        testImplementation testLibs.bundles.junit
        testImplementation testLibs.bundles.mockito
        testImplementation testLibs.hamcrest
        testImplementation testLibs.awaitility
        constraints {
            implementation('dnsjava:dnsjava') {
                version {
                    require '3.6.1'
                }
                because 'Fixes CVE-2023-39410.'
            }
            implementation('org.apache.avro:avro') {
                version {
                    require '1.11.3'
                }
                because 'Fixes CVE-2023-39410.'
            }
            implementation('org.apache.commons:commons-configuration2') {
                version {
                    require '2.11.0'
                }
                because 'Fixes CVE-2024-29131 and CVE-2024-29133.'
            }
            implementation('org.apache.httpcomponents:httpclient') {
                version {
                    require '4.5.14'
                }
                because 'We want the newest version of httpclient.'
            }
            implementation('org.apache.logging.log4j:log4j-core') {
                version {
                    require '2.17.1'
                }
                because 'Log4j 2.17.1 fixes CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, and CVE-2021-44832'
            }
            implementation('org.apache.logging.log4j:log4j-api') {
                version {
                    require '2.17.1'
                }
                because 'the build fails if the Log4j API is not update along with log4j-core'
            }
            implementation('org.apache.zookeeper:zookeeper') {
                version {
                    require '3.8.4'
                }
                because 'Fixes CVE-2024-23944, CVE-2023-44981'
            }
            implementation('com.google.code.gson:gson') {
                version {
                    require '2.8.9'
                }
                because 'Fixes WS-2021-0419 DoS vulnerability'
            }
            implementation('com.google.protobuf:protobuf-java') {
                version {
                    require '3.21.11'
                }
                because 'Fixes CVE-2022-3509, CVE-2022-3510'
            }
            implementation('org.yaml:snakeyaml') {
                version {
                    require '2.0'
                }
                because 'Fixes CVE-2022-1471'
            }
            implementation('org.codehaus.jettison:jettison') {
                version {
                    require '1.5.4'
                }
                because 'CVE from transitive dependecies'
            }
            implementation('net.minidev:json-smart') {
                version {
                    require '2.5.2'
                }
                because 'CVE from transitive dependencies, including CVE-2024-57699'
            }
            implementation('org.jetbrains.kotlin:kotlin-stdlib') {
                version {
                    require '1.8.21'
                }
                because 'CVE from transitive dependencies'
            }
            implementation('org.eclipse.jetty:http2-common') {
                version {
                    require '9.4.53.v20231009'
                }
                because 'Fixes CVE-2023-44487'
            }
            implementation('org.eclipse.jetty:http2-server') {
                version {
                    require '9.4.53.v20231009'
                }
                because 'Fixes CVE-2023-44487'
            }
            implementation('org.xerial.snappy:snappy-java') {
                version {
                    require '1.1.10.5'
                }
                because 'Fixes CVE-2023-43642'
            }
            implementation('com.squareup.okio:okio-jvm') {
                version {
                    require '3.5.0'
                }
                because 'CVE from transitive dependencies'
            }
            implementation('com.charleskorn.kaml:kaml') {
                version {
                    require '0.55.0'
                }
                because 'CVE from transitive dependencies'
            }
            implementation('com.jayway.jsonpath:json-path') {
                version {
                    require '2.9.0'
                }
                because 'Fixes CVE-2023-51074 from transitive dependencies'
            }
            implementation('org.scala-lang:scala-library') {
                version {
                    require '2.13.12'
                }
                because 'CVE from transitive dependencies'
            }
            implementation('org.jline:jline') {
                version {
                    require '3.25.0'
                }
                because 'CVE-2023-50572'
            }
            implementation('org.json:json') {
                version {
                    require '20231013'
                }
                because 'CVE-2023-5072, CVE from transitive dependencies'
            }
            implementation('org.apache.commons:commons-compress') {
                version {
                    require '1.26.0'
                }
                because 'CVE-2024-25710, CVE-2024-26308'
            }
            implementation('commons-beanutils:commons-beanutils') {
                version {
                    require '1.11.0'
                }
                because 'CVE-2025-48734'
            }
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { def details ->
            if (details.requested.group == 'io.netty') {
                if (details.requested.name == 'netty') {
                    details.useTarget group: 'io.netty', name: 'netty-all', version: '4.1.124.Final'
                    details.because 'Fixes CVE-2025-24970, CVE-2022-41881, CVE-2021-21290 and CVE-2022-41915.'
                } else if (!details.requested.name.startsWith('netty-tcnative')) {
                    details.useVersion '4.1.125.Final'
                    details.because 'Fixes CVE-2025-58057, CVE-2025-58056, CVE-2025-55163, CVE-2025-24970, CVE-2022-41881, CVE-2021-21290 and CVE-2022-41915.'
                }
            } else if (details.requested.group == 'log4j' && details.requested.name == 'log4j') {
                details.useTarget group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.17.1'
            } else if (details.requested.group == 'org.bouncycastle' && details.requested.name.endsWith('-jdk15on')) {
                def java8Name = details.requested.name.replace('-jdk15on', '-jdk18on')
                details.useTarget group: 'org.bouncycastle', name: java8Name, version: libs.bouncycastle.bcprov.get().version
                details.because 'Use only the Java 8 artifacts of BouncyCastle'
            } else if (details.requested.group == 'org.junit.jupiter') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: testLibs.versions.junit.get()
                details.because 'Use the defined JUnit of the Data Prepper project to ensure consistent versions.'
            }
        }
    }

    test {
        useJUnitPlatform()
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.current()
        }
        testLogging {
            exceptionFormat "full"
            showStackTraces false
        }
        reports {
            junitXml.required
            html.required
        }
    }

    build.dependsOn test
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.required
            html.required
        }
    }

    task allDeps(type: DependencyReportTask) {}
}

configure(subprojects.findAll {it.name != 'data-prepper-api'}) {
    dependencies {
        implementation platform('software.amazon.awssdk:bom:2.30.23')
        implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    }
}

configure(coreProjects) {
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.required
            csv.required
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }
    test {
        finalizedBy jacocoTestReport // report is always generated after tests run
    }
    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                limit {
                    minimum = 0.65 //TODO increase this to 0.75
                }
            }
        }
    }
    check.dependsOn jacocoTestCoverageVerification
}

task generateAggregateTestReport(type: TestReport) {
    destinationDirectory = file("${layout.buildDirectory}/reports/tests")
    reportOn subprojects*.test
}

licenseReport {
    excludeOwnGroup = true
    excludeBoms = true
    excludes = ['software.amazon.awssdk:bom']
    renderers = new TextReportRenderer()
}

task generateThirdPartyReport(type: Copy) {
    from 'build/reports/dependency-license/'
    into '.'
    include 'THIRD-PARTY-NOTICES.txt'
    rename 'THIRD-PARTY-NOTICES.txt', 'THIRD-PARTY'
    generateThirdPartyReport.dependsOn(generateLicenseReport)
}

// Utility method to recursively collect tasks from all projects and subprojects
def collectTasksRecursively(Project project, String taskName) {
    def tasks = []
    if (project.plugins.hasPlugin('java') || project.plugins.hasPlugin('java-library')) {
        Task task = project.tasks.findByName(taskName)
        if (task != null) {
            tasks.add(task)
        }
    }
    project.subprojects.each { subproject ->
        tasks += collectTasksRecursively(subproject, taskName)
    }
    return tasks
}

// Define a release task that depends on 'assemble' and 'publish' tasks of all nested projects within the coreProjects
task release {
    doLast {
        println "Release task completed."
    }
}

tasks.register('detectDependencyConflicts') {
    doLast {
        def allConflicts = [:]
        def projectsChecked = 0

        // Check root project and all subprojects
        def allProjects = [project] + project.subprojects

        allProjects.each { proj ->
            proj.configurations.each { config ->
                if (config.canBeResolved) {
                    try {
                        // Use incoming resolution result to see requested vs resolved versions
                        config.incoming.resolutionResult.allDependencies.each { dependency ->
                            if (dependency.hasProperty('selected') && dependency.hasProperty('requested')) {
                                def requested = dependency.requested
                                def selected = dependency.selected

                                // Check if it's a module component selector
                                if (requested.hasProperty('module') && requested.hasProperty('version')) {
                                    def moduleId = "${requested.module}"
                                    def requestedVersion = requested.version ?: '(unspecified - managed by BOM/platform)'
                                    def selectedVersion = selected.moduleVersion.version

                                    // Track ALL version requests (not just conflicts)
                                    if (!allConflicts.containsKey(moduleId)) {
                                        allConflicts[moduleId] = [
                                                versionToProjects: [:],
                                                resolved : selectedVersion,
                                                hasConflict: false
                                        ]
                                    }

                                    // Map each requested version to the projects requesting it
                                    if (!allConflicts[moduleId].versionToProjects.containsKey(requestedVersion)) {
                                        allConflicts[moduleId].versionToProjects[requestedVersion] = [] as Set
                                    }
                                    allConflicts[moduleId].versionToProjects[requestedVersion].add("${proj.path}")

                                    // Mark if there's a conflict (requested != resolved)
                                    if (requestedVersion != selectedVersion) {
                                        allConflicts[moduleId].hasConflict = true
                                    }
                                }
                            }
                        }
                        projectsChecked++
                    } catch (Exception e) {
                        // Silently skip unresolvable configurations
                    }
                }
            }
        }

        // Report conflicts - filter to only show modules with actual conflicts
        def realConflicts = allConflicts.findAll { moduleId, info -> info.hasConflict }

        if (!realConflicts.isEmpty()) {
            println "\n=== DEPENDENCY VERSION CONFLICTS DETECTED ==="
            println "Found ${realConflicts.size()} dependencies with version conflicts:\n"

            realConflicts.sort().each { moduleId, info ->
                println "⚠️  ${moduleId}"
                println "   Resolved to: ${info.resolved}"
                println "   Requested versions:"

                info.versionToProjects.sort().each { version, projects ->
                    def marker = (version == info.resolved) ? "✓" : "•"
                    def label = (version == info.resolved) ? "${version} [SELECTED]" : version
                    println "      ${marker} ${label}"
                    projects.sort().each { project ->
                        println "        - ${project}"
                    }
                }
                println ""
            }

            println "Total configurations checked: ${projectsChecked}"
            println "\nNote: Gradle resolved these conflicts automatically by selecting compatible versions."
            println "\nTo investigate why a specific version was selected, use:"
            println "  ./gradlew :project-name:dependencyInsight --dependency <artifact-name> --configuration runtimeClasspath"
            println "\nExample:"
            println "  ./gradlew :data-prepper-core:dependencyInsight --dependency guava --configuration runtimeClasspath"
            println "\nThis will show the complete dependency tree and why Gradle chose the resolved version.\n"

            // Make it non-failing by default, just informational
            // Uncomment the line below if you want to fail the build on conflicts:
            throw new GradleException("Dependency conflicts found!")
        } else {
            println "✅ No dependency version conflicts detected (checked ${projectsChecked} configurations)"
        }
    }
}

// Iterate over each core project and collect 'assemble' and 'publish' tasks recursively from them and their nested subprojects
coreProjects.each { coreProject ->
    // Ensure that the core project and its subprojects are evaluated
    evaluationDependsOn(coreProject.path)

    // Recursively collect 'assemble' and 'publishToMavenLocal' tasks for the core project
    def assembleTasks = collectTasksRecursively(coreProject, 'assemble')
    def publishTasks = collectTasksRecursively(coreProject, 'publish')

    // Explicitly declare release task for better gradle compatibility
    def releaseTask = tasks.named('release').get()
    releaseTask.dependsOn assembleTasks
    releaseTask.dependsOn publishTasks
}

// Add dependency conflict detection to the build task (once, not per core project)
build.dependsOn detectDependencyConflicts